{
    "docs": [
        {
            "location": "/",
            "text": "Request Yo Racks (Now)!\n\u00b6\n\n\nThe city of Austin offers the possibility to apply for the \nfree installation of bike corrals on the right of way/parking spot close to businesses\n. The process requires the requester to write an email to a specific service of the city, and include additional information about the location and the business owner(s).\n\n\nBut there are two problems with this approach:\n\n\n\n\n\n\nThe first problem is that people do not want to spend the time to write the email and collect the necessary information.\n\n\n\n\n\n\nThe second one is that, in spite of the fact that the people in charge of the program are willing to help, the process is not completely straightforward:\n\n\n\n\n\"There will generally be at least a few back and forth messages associated with a bike parking request.\"\n\n\n\n\n\n\n\n\n\u201cRequest yo racks\u201d proposes to simplify the process by automating all these tasks, and reducing the requester efforts to 3 simple steps:",
            "title": "Home"
        },
        {
            "location": "/#request-yo-racks-now",
            "text": "The city of Austin offers the possibility to apply for the  free installation of bike corrals on the right of way/parking spot close to businesses . The process requires the requester to write an email to a specific service of the city, and include additional information about the location and the business owner(s).  But there are two problems with this approach:    The first problem is that people do not want to spend the time to write the email and collect the necessary information.    The second one is that, in spite of the fact that the people in charge of the program are willing to help, the process is not completely straightforward:   \"There will generally be at least a few back and forth messages associated with a bike parking request.\"     \u201cRequest yo racks\u201d proposes to simplify the process by automating all these tasks, and reducing the requester efforts to 3 simple steps:",
            "title": "Request Yo Racks (Now)!"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/",
            "text": "Request Yo Racks 3.0 Concepts\n\u00b6\n\n\nRYR 3.0 is a \nMAJOR\n rewrite of the project. And RYR being a collection of projects, changes will happen in most of them.\n\n\n\n\nThe reasons for such a rewrite are mainly:\n\n\n\n\nLeveraging what we learned and apply it to produce higher quality deliverables\n\n\nUsing technologies with a higher adoption rate in order to:\n\n\nBenefit from a more modern tooling\n\n\nGain more contributors\n\n\n\n\n\n\n\n\nWorking with \nPolymer\n was cool, but it was very hard to find people interested in helping. Switching to \nReactJS\n gave us the opportunity to attract more contributors very quickly. It also made it way quicker/easier to find documentation, examples and tools.\n\n\nMain projects\n\u00b6\n\n\nFrontend\n\u00b6\n\n\nAs mentioned previously, we are switching from \nPolymer\n to \nReactJS\n. This is the biggest task!\n\n\nIn addition to this we want our components to be documented and tested. We want to be able to use them individually\neasily and provide demos (as a form a test and documentation).\n\n\nWe plan on using \nAnt\n and \nAnt Mobile\n for the UI component libraries.\n\n\nList of \nIssues\n.\n\n\nBackend\n\u00b6\n\n\nThe backend is currently operational, distributed, elastic and well tested. But we want to go even further.\n\n\nHere is what we want to implement in the next version:\n\n\n\n\nUse OpenAPI to define the REST API\n\n\nDescribe the API using an OpenAPI document\n\n\nGenerate the REST API server\n\n\n\n\n\n\nAdd extra collectors\n\n\nImprove the validity of the data being collected\n\n\nSend emails automatically\n\n\n\n\nList of \nIssues\n.\n\n\nDocumentation\n\u00b6\n\n\nDocumentation is a key principle of this RYR. There is always something to write about or some room for improvement.\n\n\nWe have very good overview documentation, a great setup guide, but each of our project should have individual\ndocumentation providing the following:\n\n\n\n\nA README file containing:\n\n\nGeneral information about the project\n\n\nA quick start guide to set it up\n\n\nA quick start guide for contributors\n\n\n\n\n\n\nA Changelog following the \nkeep a changelog\n recommendations\n\n\nA static documentation web site:\n\n\nExplaining in great details how to use this specific project\n\n\nExplaining in great details how to contribute to this specific project\n\n\nUpdated with each merge to the master branch\n\n\nHosted on GitHub page\n\n\n\n\n\n\n\n\nInfrastructure\n\u00b6\n\n\nThe Infrastructure is in a fairly good shape, but we are always looking for more automation\nor ways to improve our workflows.\n\n\nProbot for Issue/Pull-Request management\n\u00b6\n\n\nProbot\n is a set of apps to automate and improve your GitHub workflows. We should use some of them to manage our projects more efficiently.\n\n\nHere are a few apps we identified:\n\n\n\n\nCommit Lint\n\n\nMove Issues\n\n\nStale\n\n\n\n\nWe are also using \nGitmate for sizing PRs\n. We should write a Probot app to replace it.\n\n\nList of \nIssues\n.\n\n\nArtwork / Branding / Marketing\n\u00b6\n\n\nThe project needs a stronger identity.\n\n\nWe have cool logos, a nice design, but we have nothing defining the \"brand\" of our project.\n\n\nIdeally each of our project/subproject should have its own identity, while preserving the feeling of being a piece of the RYR ecosystem.\n\n\nArtwork\n\u00b6\n\n\nAs we are starting to create cool pieces artworks, they probably deserve their own project.\n\n\nNewsletter\n\u00b6\n\n\nA newsletter is a great channel to provide information to your users. We have a few ideas to execute this task:\n\n\n\n\nWrite our own:\n it shounds appealing, but we would need to be sure to be able to create enough content.\n\n\nUse other's newsletter:\n for example post an article in Bike Austin, Open Austin, etc.\n\n\nCompile related information from other sources:\n This may also be automated.\n\n\n\n\nSocial media\n\u00b6\n\n\nWe do not have any presence on social media yet. We should probably have at least a Facebook page, and twitter account.\n\n\nSide projects\n\u00b6\n\n\nLanding page\n\u00b6\n\n\nThe current landing page was a very small and simple project we used to learn \nPolymer\n 3.0. Converting it to \nReactJS\n\nwould be a good way to become more familiar with the framework.\n\n\nList of \nIssues\n.\n\n\nChart repository index page\n\u00b6\n\n\nOur \nHelm Chart index page\n is a very simple static page built by parsing our\n\nchart repository index file\n\n(\nofficial documentation\n).\n\n\nIdeally we would suppress the static generation step by developing an application which would generate the page on the\nfly. Something similar to what \nDocsify\n does, but for the chart index instead.\n\n\nFlower Docker image\n\u00b6\n\n\nThere is currently no official upstream \nflower\n image for Docker. Ours is similar to the\n\nimages that can be found\n\non the Docker hub, but has the advantages of being current and very small (47MB - 3x to 6x smaller than other ones).\n\n\nWe should polish it and position it as the default image for Flower, and ideally it would become the official upstream\nimage.\n\n\nList of \nIssues\n.\n\n\nFlower Helm Chart\n\u00b6\n\n\nHaving a good Docker Image is one thing, but being able to deploy it easily and quickly is another one.\n\n\nOur chart works fine to deploy \nFlower\n in our development environment but is not production ready. We should push it\nto the next level and like the Docker image, position it as the official chart, submit it upstream, as well as to the\n\nofficial Charts for Helm\n.\n\n\nList of \nIssues\n.\n\n\nLiving style guide\n\u00b6\n\n\nWe need a style guide to ensure consistency in our projects and simplify the development process.\n\n\nreact-styleguidist\n seems to be a great candidate, but there is definitely more\nresearch to do.\n\n\n3rd party projects we use that could receive some love\n\u00b6\n\n\nWe are using a wide variety of open source tools to build RYR. It would be nice to allocate some cycles to contribute\nback.\n\n\nPython - \nFlower\n\u00b6\n\n\nPython - \nResponses\n\u00b6",
            "title": "RYR 3.0 concepts"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#request-yo-racks-30-concepts",
            "text": "RYR 3.0 is a  MAJOR  rewrite of the project. And RYR being a collection of projects, changes will happen in most of them.   The reasons for such a rewrite are mainly:   Leveraging what we learned and apply it to produce higher quality deliverables  Using technologies with a higher adoption rate in order to:  Benefit from a more modern tooling  Gain more contributors     Working with  Polymer  was cool, but it was very hard to find people interested in helping. Switching to  ReactJS  gave us the opportunity to attract more contributors very quickly. It also made it way quicker/easier to find documentation, examples and tools.",
            "title": "Request Yo Racks 3.0 Concepts"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#main-projects",
            "text": "",
            "title": "Main projects"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#frontend",
            "text": "As mentioned previously, we are switching from  Polymer  to  ReactJS . This is the biggest task!  In addition to this we want our components to be documented and tested. We want to be able to use them individually\neasily and provide demos (as a form a test and documentation).  We plan on using  Ant  and  Ant Mobile  for the UI component libraries.  List of  Issues .",
            "title": "Frontend"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#backend",
            "text": "The backend is currently operational, distributed, elastic and well tested. But we want to go even further.  Here is what we want to implement in the next version:   Use OpenAPI to define the REST API  Describe the API using an OpenAPI document  Generate the REST API server    Add extra collectors  Improve the validity of the data being collected  Send emails automatically   List of  Issues .",
            "title": "Backend"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#documentation",
            "text": "Documentation is a key principle of this RYR. There is always something to write about or some room for improvement.  We have very good overview documentation, a great setup guide, but each of our project should have individual\ndocumentation providing the following:   A README file containing:  General information about the project  A quick start guide to set it up  A quick start guide for contributors    A Changelog following the  keep a changelog  recommendations  A static documentation web site:  Explaining in great details how to use this specific project  Explaining in great details how to contribute to this specific project  Updated with each merge to the master branch  Hosted on GitHub page",
            "title": "Documentation"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#infrastructure",
            "text": "The Infrastructure is in a fairly good shape, but we are always looking for more automation\nor ways to improve our workflows.",
            "title": "Infrastructure"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#probot-for-issuepull-request-management",
            "text": "Probot  is a set of apps to automate and improve your GitHub workflows. We should use some of them to manage our projects more efficiently.  Here are a few apps we identified:   Commit Lint  Move Issues  Stale   We are also using  Gitmate for sizing PRs . We should write a Probot app to replace it.  List of  Issues .",
            "title": "Probot for Issue/Pull-Request management"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#artwork-branding-marketing",
            "text": "The project needs a stronger identity.  We have cool logos, a nice design, but we have nothing defining the \"brand\" of our project.  Ideally each of our project/subproject should have its own identity, while preserving the feeling of being a piece of the RYR ecosystem.",
            "title": "Artwork / Branding / Marketing"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#artwork",
            "text": "As we are starting to create cool pieces artworks, they probably deserve their own project.",
            "title": "Artwork"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#newsletter",
            "text": "A newsletter is a great channel to provide information to your users. We have a few ideas to execute this task:   Write our own:  it shounds appealing, but we would need to be sure to be able to create enough content.  Use other's newsletter:  for example post an article in Bike Austin, Open Austin, etc.  Compile related information from other sources:  This may also be automated.",
            "title": "Newsletter"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#social-media",
            "text": "We do not have any presence on social media yet. We should probably have at least a Facebook page, and twitter account.",
            "title": "Social media"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#side-projects",
            "text": "",
            "title": "Side projects"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#landing-page",
            "text": "The current landing page was a very small and simple project we used to learn  Polymer  3.0. Converting it to  ReactJS \nwould be a good way to become more familiar with the framework.  List of  Issues .",
            "title": "Landing page"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#chart-repository-index-page",
            "text": "Our  Helm Chart index page  is a very simple static page built by parsing our chart repository index file \n( official documentation ).  Ideally we would suppress the static generation step by developing an application which would generate the page on the\nfly. Something similar to what  Docsify  does, but for the chart index instead.",
            "title": "Chart repository index page"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#flower-docker-image",
            "text": "There is currently no official upstream  flower  image for Docker. Ours is similar to the images that can be found \non the Docker hub, but has the advantages of being current and very small (47MB - 3x to 6x smaller than other ones).  We should polish it and position it as the default image for Flower, and ideally it would become the official upstream\nimage.  List of  Issues .",
            "title": "Flower Docker image"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#flower-helm-chart",
            "text": "Having a good Docker Image is one thing, but being able to deploy it easily and quickly is another one.  Our chart works fine to deploy  Flower  in our development environment but is not production ready. We should push it\nto the next level and like the Docker image, position it as the official chart, submit it upstream, as well as to the official Charts for Helm .  List of  Issues .",
            "title": "Flower Helm Chart"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#living-style-guide",
            "text": "We need a style guide to ensure consistency in our projects and simplify the development process.  react-styleguidist  seems to be a great candidate, but there is definitely more\nresearch to do.",
            "title": "Living style guide"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#3rd-party-projects-we-use-that-could-receive-some-love",
            "text": "We are using a wide variety of open source tools to build RYR. It would be nice to allocate some cycles to contribute\nback.",
            "title": "3rd party projects we use that could receive some love"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#python-flower",
            "text": "",
            "title": "Python - Flower"
        },
        {
            "location": "/contributor-zone/ryr3.0-concepts/#python-responses",
            "text": "",
            "title": "Python - Responses"
        },
        {
            "location": "/contributor-zone/technical-overview/",
            "text": "Technical overview\n\u00b6\n\n\nRequest Yo Racks is a collection of open source projects hosted on Github.\n\n\nKey principles\n\u00b6\n\n\n\n\nEverything must be automated.\n\n\nEverything must be documented.\n\n\nEverything must be containerized.\n\n\n\n\nInfrastructure design\n\u00b6\n\n\n.\n\n\nAPI\n\u00b6\n\n\nThe API is made with \nPython\n, using\n\nDjango REST Framework\n (DRF), and served by \ngUnicorn\n\n\nThe tasks are handled by \nCelery\n to process them\nasynchronously or in parallel. \nFlower\n is used to monitor them.\n\n\nAll the Python documentation is written in \nreStructuredText\n\nand generated with \nSphinx\n.\n\n\nRepository: \nAPI\n\n\nWeb\n\u00b6\n\n\nThe frontend is a \nProgressive Web Application (PWA)\n.\nThe \nPolymer\n library offers the ability to quickly create a PWA implementing the\n\nPRPL pattern\n, and to build\n\nweb components\n.\n\n\nRepository: \nWeb\n\n\nInfrastructure\n\u00b6\n\n\nThe projects are fully containerized using \nDocker\n and deployed\non a \nKubernetes\n cluster on the \nGCP\n.",
            "title": "Technical Overview"
        },
        {
            "location": "/contributor-zone/technical-overview/#technical-overview",
            "text": "Request Yo Racks is a collection of open source projects hosted on Github.",
            "title": "Technical overview"
        },
        {
            "location": "/contributor-zone/technical-overview/#key-principles",
            "text": "Everything must be automated.  Everything must be documented.  Everything must be containerized.",
            "title": "Key principles"
        },
        {
            "location": "/contributor-zone/technical-overview/#infrastructure-design",
            "text": ".",
            "title": "Infrastructure design"
        },
        {
            "location": "/contributor-zone/technical-overview/#api",
            "text": "The API is made with  Python , using Django REST Framework  (DRF), and served by  gUnicorn  The tasks are handled by  Celery  to process them\nasynchronously or in parallel.  Flower  is used to monitor them.  All the Python documentation is written in  reStructuredText \nand generated with  Sphinx .  Repository:  API",
            "title": "API"
        },
        {
            "location": "/contributor-zone/technical-overview/#web",
            "text": "The frontend is a  Progressive Web Application (PWA) .\nThe  Polymer  library offers the ability to quickly create a PWA implementing the PRPL pattern , and to build web components .  Repository:  Web",
            "title": "Web"
        },
        {
            "location": "/contributor-zone/technical-overview/#infrastructure",
            "text": "The projects are fully containerized using  Docker  and deployed\non a  Kubernetes  cluster on the  GCP .",
            "title": "Infrastructure"
        },
        {
            "location": "/contributor-zone/adw-2017/",
            "text": "Austin Design Week 2017\n\u00b6\n\n\nAbstract\n\u00b6\n\n\nThe first annual \nAustin Design Week\n took place from November 6th to 10th 2017.\n\n\nRequest Yo Racks was recommended by \nOpen Austin\n and then selected by a few people who decided to work on it. One of them (\u201cJohn\u201d) is an employee of the DoT.\n\n\nFeedback\n\u00b6\n\n\nHere is the feedback I was able to collect thanks to them:\n\n\n\n\nThe idea was \nVERY\n appreciated\n\n\nBicycle Rack Requests\n - This is a list of bicycle racks installed and/or distributed by the City of Austin Bicycle Program (last updated in 2012)\n\n\nA \npresentation\n was made on the very last day.\n\n\n\n\nCity needs\n\u00b6\n\n\nThe app would ideally cover:\n\n\n\n\n\n\nRequests in public property and sites on private property (publicly accessible) \u2013 you should be able to tag if the request is on private or public land)\n\n\n\n\nProgram funds can also support installs on private property that is publicly accessible: \nhttp://www.austintexas.gov/sites/default/files/files/Public_Works/Bike_Rack_Flyer.pdf\n\n\n\n\n\n\n\n\nCrowdsourced input of existing bike parking would be great \u2013 there is not current a data source existing of all existing racks\n\n\n\n\nCapturing a photo of a suggested location\n\n\nFlagging proposed in-street corral locations\n\n\nAllowing and encouraging input of a contact person (e.g. adjacent business owner or property manager to serve as a point of contact)\n\n\nApp could support City or 3rd party bike rack installs \u2013 these entities and the public should be able to note when a requested rack is installed.\n\n\n\n\nUpvoting feature would be great\n\n\n\n\nThis would help indicate where demand for a rack is highest, and possibly prioritize it for installation. It is also important (from the city's perspective) that the app demonstrate how strong the demand is for racks in general, because that makes the case for the existence of the program, so any feature that highlights the need for bike racks is a plus.",
            "title": "Austin Design Week 2017"
        },
        {
            "location": "/contributor-zone/adw-2017/#austin-design-week-2017",
            "text": "",
            "title": "Austin Design Week 2017"
        },
        {
            "location": "/contributor-zone/adw-2017/#abstract",
            "text": "The first annual  Austin Design Week  took place from November 6th to 10th 2017.  Request Yo Racks was recommended by  Open Austin  and then selected by a few people who decided to work on it. One of them (\u201cJohn\u201d) is an employee of the DoT.",
            "title": "Abstract"
        },
        {
            "location": "/contributor-zone/adw-2017/#feedback",
            "text": "Here is the feedback I was able to collect thanks to them:   The idea was  VERY  appreciated  Bicycle Rack Requests  - This is a list of bicycle racks installed and/or distributed by the City of Austin Bicycle Program (last updated in 2012)  A  presentation  was made on the very last day.",
            "title": "Feedback"
        },
        {
            "location": "/contributor-zone/adw-2017/#city-needs",
            "text": "The app would ideally cover:    Requests in public property and sites on private property (publicly accessible) \u2013 you should be able to tag if the request is on private or public land)   Program funds can also support installs on private property that is publicly accessible:  http://www.austintexas.gov/sites/default/files/files/Public_Works/Bike_Rack_Flyer.pdf     Crowdsourced input of existing bike parking would be great \u2013 there is not current a data source existing of all existing racks   Capturing a photo of a suggested location  Flagging proposed in-street corral locations  Allowing and encouraging input of a contact person (e.g. adjacent business owner or property manager to serve as a point of contact)  App could support City or 3rd party bike rack installs \u2013 these entities and the public should be able to note when a requested rack is installed.   Upvoting feature would be great   This would help indicate where demand for a rack is highest, and possibly prioritize it for installation. It is also important (from the city's perspective) that the app demonstrate how strong the demand is for racks in general, because that makes the case for the existence of the program, so any feature that highlights the need for bike racks is a plus.",
            "title": "City needs"
        },
        {
            "location": "/contributor-zone/services-costs/",
            "text": "Services and costs\n\u00b6\n\n\nHere is a breakdown of the services and costs associated to running the Request Yo Racks services.\n\n\nDeployed services\n\u00b6\n\n\nInfrastructure support\n\u00b6\n\n\n\n\nIngress Controller\n: L7 Load balancer\n\n\nExternal DNS Manager\n: Hosted DNS zone automated management\n\n\nCertManager\n: SSL Certificate management\n\n\nStackdriver\n: Logging\n\n\n\n\nProject support\n\u00b6\n\n\n\n\nRedis\n: Caching and broker for distributed tasks\n\n\nPostgres\n: SQL Database\n\n\n\n\nRYR projects\n\u00b6\n\n\nThese projects are for RYR itself, the frontend, the API and the backend.\n\n\n\n\nRYR API\n\n\nRYR Celery Workers (x2)\n\n\nRYR Celery Flower\n\n\nRYR Web\n\n\n\n\nRYR sites\n\u00b6\n\n\n\n\n\n\n\n\nSite\n\n\nURL\n\n\n\n\n\n\n\n\n\n\nDocs\n\n\ndocs.requestyoracks.org\n\n\n\n\n\n\nCharts\n\n\ncharts.requestyoracks.org\n\n\n\n\n\n\nLanding page\n\n\nlanding.requestyoracks.org\n (but currently \nwww.requestyoracks.org\n)\n\n\n\n\n\n\nwww\n\n\nwww.requestyoracks.org\n (\ncurrently unavailable\n)\n\n\n\n\n\n\nAPI\n\n\napi.requestyoracks.org\n (\ncurrently unavailable\n)\n\n\n\n\n\n\n\n\nExternal Services\n\u00b6\n\n\nThe Request Yo Racks infrastructure uses the free or Open Source tier for all the following services.\n\n\n\n\nGithub\n (with Github pages): Code repositories and static site hosting\n\n\nCircle CI\n: Continuous Integration\n\n\nMergify.io\n: Automatically merge approved Pull Requests\n\n\nCoveralls.io\n: Ensure new code contributions come with unit tests\n\n\nGitmate.io\n: Automate some basic administration tasks\n\n\nDocker Hub\n: Registry and pipeline for Docker images\n\n\nLet\u2019s Encrypt\n: Free, automated, and open Certificate Authority\n\n\n\n\nCosts\n\u00b6\n\n\n\n\n\n\n\n\nProvider\n\n\nService\n\n\nCost\n\n\n\n\n\n\n\n\n\n\nGCP\n\n\nKubernetes HA cluster 3 Nodes N1\n\n\n$110.00\n\n\n\n\n\n\nGCP\n\n\nLoad Balancer\n\n\n$18.00\n\n\n\n\n\n\nGCP\n\n\nStorage (100GB)\n\n\n$10.00\n\n\n\n\n\n\nGCP\n\n\nMisc fees\n\n\n$5.00\n\n\n\n\n\n\nGoogle domain\n\n\nDomain name (yearly: $30)\n\n\n$2.50\n\n\n\n\n\n\n\n\nTOTAL\n\n\n$145.50",
            "title": "Services & costs"
        },
        {
            "location": "/contributor-zone/services-costs/#services-and-costs",
            "text": "Here is a breakdown of the services and costs associated to running the Request Yo Racks services.",
            "title": "Services and costs"
        },
        {
            "location": "/contributor-zone/services-costs/#deployed-services",
            "text": "",
            "title": "Deployed services"
        },
        {
            "location": "/contributor-zone/services-costs/#infrastructure-support",
            "text": "Ingress Controller : L7 Load balancer  External DNS Manager : Hosted DNS zone automated management  CertManager : SSL Certificate management  Stackdriver : Logging",
            "title": "Infrastructure support"
        },
        {
            "location": "/contributor-zone/services-costs/#project-support",
            "text": "Redis : Caching and broker for distributed tasks  Postgres : SQL Database",
            "title": "Project support"
        },
        {
            "location": "/contributor-zone/services-costs/#ryr-projects",
            "text": "These projects are for RYR itself, the frontend, the API and the backend.   RYR API  RYR Celery Workers (x2)  RYR Celery Flower  RYR Web",
            "title": "RYR projects"
        },
        {
            "location": "/contributor-zone/services-costs/#ryr-sites",
            "text": "Site  URL      Docs  docs.requestyoracks.org    Charts  charts.requestyoracks.org    Landing page  landing.requestyoracks.org  (but currently  www.requestyoracks.org )    www  www.requestyoracks.org  ( currently unavailable )    API  api.requestyoracks.org  ( currently unavailable )",
            "title": "RYR sites"
        },
        {
            "location": "/contributor-zone/services-costs/#external-services",
            "text": "The Request Yo Racks infrastructure uses the free or Open Source tier for all the following services.   Github  (with Github pages): Code repositories and static site hosting  Circle CI : Continuous Integration  Mergify.io : Automatically merge approved Pull Requests  Coveralls.io : Ensure new code contributions come with unit tests  Gitmate.io : Automate some basic administration tasks  Docker Hub : Registry and pipeline for Docker images  Let\u2019s Encrypt : Free, automated, and open Certificate Authority",
            "title": "External Services"
        },
        {
            "location": "/contributor-zone/services-costs/#costs",
            "text": "Provider  Service  Cost      GCP  Kubernetes HA cluster 3 Nodes N1  $110.00    GCP  Load Balancer  $18.00    GCP  Storage (100GB)  $10.00    GCP  Misc fees  $5.00    Google domain  Domain name (yearly: $30)  $2.50     TOTAL  $145.50",
            "title": "Costs"
        },
        {
            "location": "/contributor-zone/goals-strategy/",
            "text": "Project Planning Canvas\n\u00b6",
            "title": "Project Planning Canvas"
        },
        {
            "location": "/contributor-zone/goals-strategy/#project-planning-canvas",
            "text": "",
            "title": "Project Planning Canvas"
        },
        {
            "location": "/guides/setup-full-environment/",
            "text": "How to setup a full environment?\n\u00b6\n\n\nPrerequisites\n\u00b6\n\n\n\n\nTips\n\n\nA script in the\n\ninfra\n\nrepository can assist you to install the prerequisites software automatically and configure your Github account\n(\nOS X only\n).\n\n\nTo start the procedure, simply run the following command:\n\nbash <\n(\ncurl -fsSL https://raw.githubusercontent.com/request-yo-racks/infra/master/bootstrap/bootstrap-osx.sh\n)\n\n\n\n\nAt the end of the procedure, your SSH key will be automatically copied to your clipboard and\na web page will pop up with the instructions to help you add it to Github.\n\n\nIf nothing pops up, run \nexport RYR_BOOTSTRAP_SILENT=0\n, then replay the script.\n\n\n\n\nGithub\n\u00b6\n\n\n\n\nA \nGithub\n account\n\n\nWith an \nSSH key\n\n\nAdded to your \nGithub account\n\n\n\n\n\n\n\n\nSoftware\n\u00b6\n\n\n\n\nHomebrew\n if you are using OSX\n\n\nA terminal. The default one is fine, but \niterm2\n is better\n\n\nVirtualbox\n\n\nDocker\n\n\nNodeJS\n\n\n\n\nAccounts\n\u00b6\n\n\nFirst, you will need:\n\n\n\n\nA \nYelp\n account\n\n\nA \nGoogle\n account\n\n\n\n\nDeveloper keys\n\u00b6\n\n\nCreate a developer Key for:\n\n\n\n\nYelp Fusion API\n\n\nGoogle Maps Platform API Key\n for \nMaps\n and \nPlaces\n\n\n\n\nEnvironment variables\n\u00b6\n\n\n\n\nTips\n\n\nAdd the RYR variables to your \n~/.bash_profile\n to avoid exporting them every time:\n\n# Set RYR variables.\n\n\nexport\n \nRYR_GLOBAL_CONFIG_DIR\n=\n\"\n${\nHOME\n}\n/.config/ryr\"\n\n\nexport\n \nRYR_PROJECT_DIR\n=\n\"\n${\nHOME\n}\n/projects/request-yo-racks\"\n\n\n\n\n\n\n\n\n\n\nOnce your accounts are setup, store your developer keys in a global environment file. This file should be located in\n\n~/.config/ryr\n, which is your configuration directory for the request-yo-racks project.\n\n\n\n\n\n\nExport the location of the configuration directory to an environment variable.\n\nexport\n \nRYR_GLOBAL_CONFIG_DIR\n=\n\"\n${\nHOME\n}\n/.config/ryr\"\n\n\n\n\n\n\n\n\nThen create the \nryr-env.sh\n script.\n\nmkdir -p \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n\"\n\ncat \n<< EOF > \"${RYR_GLOBAL_CONFIG_DIR}/ryr-env.sh\"\n\n\nexport RYR_COLLECTOR_YELP_API_KEY=foo\n\n\nexport RYR_COLLECTOR_GOOGLE_PLACES_API_KEY=foo\n\n\nexport RYR_WEB_GOOGLE_MAPS_API_KEY=foo\n\n\nexport API_BASE_URL=http://api.192.168.99.100.nip.io/\n\n\nEOF\n\nchmod \n400\n \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n/ryr-env.sh\"\n\n\n\n\n\n\n\n\nFor creating Kubernetes secrets, you need to create one file per key in the \n~/.config/ryr/kubernetes-secrets\n folder.\n\nmkdir -p \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n/kubernetes-secrets\"\n\n\ncd\n \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n/kubernetes-secrets\"\n\n\necho\n \n\"foo\"\n > RYR_COLLECTOR_YELP_API_KEY\n\necho\n \n\"foo\"\n > RYR_COLLECTOR_GOOGLE_PLACES_API_KEY\n\necho\n \n\"foo\"\n > RYR_WEB_GOOGLE_MAPS_API_KEY\n\n\n\n\n\n\n\nAt the end of the process, your \n~/.config/ryr\n folder should look like this:\n\n[\n~/.config/ryr\n]\n $ tree -L \n2\n\n.\n\u251c\u2500\u2500 kubernetes-secrets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_GOOGLE_PLACES_API_KEY\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_YELP_API_KEY\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 RYR_WEB_GOOGLE_MAPS_API_KEY\n\u2514\u2500\u2500 ryr-env.sh\n\n\n\n\n\nTips\n\n\nIf for any reasone you need to remove the new line character (\n\\n\n) in one of the files, refer to this \nStackExchange post\n.\n\n\n\n\nFork the projects\n\u00b6\n\n\nGo to the \nRequest Yo Racks\n organization on Github and\n\nfork\n the \ninfra\n, \napi\n, and \nweb\n projects (the \ncharts\n and \ndocs\n projects are optional as they are no required to run RYR).\n\n\nClone or update the projects\n\u00b6\n\n\n\n\n\n\nConfigure a folder which will contain the RYR projects.\n\nexport\n \nRYR_PROJECT_DIR\n=\n\"\n${\nHOME\n}\n/projects/request-yo-racks\"\n\n\n\n\n\n\n\n\nConfigure your Github user.\n\nexport\n \nGH_USER\n=\n<your_github_user_name>\n\n\n\n\n\n\n\nClone or update the projects (the \ncharts\n and \ndocs\n projects are optional as they are no required to run RYR).\n\nmkdir -p \n\"\n${\nRYR_PROJECT_DIR\n}\n\"\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n\"\n\n\nfor\n project in api charts docs infra landing-page web\n;\n \ndo\n\n  git clone git@github.com:\n${\nGH_USER\n}\n/\n${\nproject\n}\n.git \n2\n> /dev/null \n||\n git -C \n${\nproject\n}\n/ pull upstream master\n;\n\n  git -C \n${\nproject\n}\n remote add upstream git@github.com:request-yo-racks/\n${\nproject\n}\n.git \n2\n> /dev/null\n;\n\n\ndone\n\n\n\n\n\n\n\n\nEach project is provided with a \nMakefile\n and can be simply setup with the \nmake\n command.\n\n\nStart the services\n\u00b6\n\n\nExternal services\n\u00b6\n\n\nThis will spin up \nminikube\n and setup the external services that are required by RYR, like \npostgresql\n, \nredis\n,\n\nrabbitmq\n.\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n/infra/kubernetes\"\n\nmake provision configure\n\n\n\n\nAPI\n\u00b6\n\n\neval\n \n$(\nminikube docker-env\n)\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n/api\"\n\nmake build-docker deploy-minikube-\n{\napi,flower,celery-worker\n}\n\n\n\n\n\nTest your setup from a terminal:\n\ncurl -X GET \n\\\n\n  \n'http://api.192.168.99.100.nip.io/1.0/places?location=30.318673580117846,-97.72446155548096'\n\n\n\nOr from a web browser:\n\nhttp://api.192.168.99.100.nip.io/1.0/places?location=30.318673580117846,-97.72446155548096\n\n\nYou can also browse the API documentation:\n\nhttp://api.192.168.99.100.nip.io/1.0/ui\n\n\nWeb\n\u00b6\n\n\n\n\nNotes\n\n\nYour Google Maps API key will automatically be pulled from the environment variables into the \nsrc/config-dev.js\n\nfile by the \nMakefile\n. See the \ninit-config\n target for more details.\n\n\n\n\neval\n \n$(\nminikube docker-env\n)\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n/web\"\n\nnpm i\nnpm run dev\n\n\n\n\nCheck the web application:\n\nopen http://127.0.0.1:8080",
            "title": "Setting up a local environment"
        },
        {
            "location": "/guides/setup-full-environment/#how-to-setup-a-full-environment",
            "text": "",
            "title": "How to setup a full environment?"
        },
        {
            "location": "/guides/setup-full-environment/#prerequisites",
            "text": "Tips  A script in the infra \nrepository can assist you to install the prerequisites software automatically and configure your Github account\n( OS X only ).  To start the procedure, simply run the following command: bash < ( curl -fsSL https://raw.githubusercontent.com/request-yo-racks/infra/master/bootstrap/bootstrap-osx.sh )   At the end of the procedure, your SSH key will be automatically copied to your clipboard and\na web page will pop up with the instructions to help you add it to Github.  If nothing pops up, run  export RYR_BOOTSTRAP_SILENT=0 , then replay the script.",
            "title": "Prerequisites"
        },
        {
            "location": "/guides/setup-full-environment/#github",
            "text": "A  Github  account  With an  SSH key  Added to your  Github account",
            "title": "Github"
        },
        {
            "location": "/guides/setup-full-environment/#software",
            "text": "Homebrew  if you are using OSX  A terminal. The default one is fine, but  iterm2  is better  Virtualbox  Docker  NodeJS",
            "title": "Software"
        },
        {
            "location": "/guides/setup-full-environment/#accounts",
            "text": "First, you will need:   A  Yelp  account  A  Google  account",
            "title": "Accounts"
        },
        {
            "location": "/guides/setup-full-environment/#developer-keys",
            "text": "Create a developer Key for:   Yelp Fusion API  Google Maps Platform API Key  for  Maps  and  Places",
            "title": "Developer keys"
        },
        {
            "location": "/guides/setup-full-environment/#environment-variables",
            "text": "Tips  Add the RYR variables to your  ~/.bash_profile  to avoid exporting them every time: # Set RYR variables.  export   RYR_GLOBAL_CONFIG_DIR = \" ${ HOME } /.config/ryr\"  export   RYR_PROJECT_DIR = \" ${ HOME } /projects/request-yo-racks\"      Once your accounts are setup, store your developer keys in a global environment file. This file should be located in ~/.config/ryr , which is your configuration directory for the request-yo-racks project.    Export the location of the configuration directory to an environment variable. export   RYR_GLOBAL_CONFIG_DIR = \" ${ HOME } /.config/ryr\"     Then create the  ryr-env.sh  script. mkdir -p  \" ${ RYR_GLOBAL_CONFIG_DIR } \" \ncat  << EOF > \"${RYR_GLOBAL_CONFIG_DIR}/ryr-env.sh\"  export RYR_COLLECTOR_YELP_API_KEY=foo  export RYR_COLLECTOR_GOOGLE_PLACES_API_KEY=foo  export RYR_WEB_GOOGLE_MAPS_API_KEY=foo  export API_BASE_URL=http://api.192.168.99.100.nip.io/  EOF \nchmod  400   \" ${ RYR_GLOBAL_CONFIG_DIR } /ryr-env.sh\"     For creating Kubernetes secrets, you need to create one file per key in the  ~/.config/ryr/kubernetes-secrets  folder. mkdir -p  \" ${ RYR_GLOBAL_CONFIG_DIR } /kubernetes-secrets\"  cd   \" ${ RYR_GLOBAL_CONFIG_DIR } /kubernetes-secrets\"  echo   \"foo\"  > RYR_COLLECTOR_YELP_API_KEY echo   \"foo\"  > RYR_COLLECTOR_GOOGLE_PLACES_API_KEY echo   \"foo\"  > RYR_WEB_GOOGLE_MAPS_API_KEY    At the end of the process, your  ~/.config/ryr  folder should look like this: [ ~/.config/ryr ]  $ tree -L  2 \n.\n\u251c\u2500\u2500 kubernetes-secrets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_GOOGLE_PLACES_API_KEY\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_YELP_API_KEY\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 RYR_WEB_GOOGLE_MAPS_API_KEY\n\u2514\u2500\u2500 ryr-env.sh   Tips  If for any reasone you need to remove the new line character ( \\n ) in one of the files, refer to this  StackExchange post .",
            "title": "Environment variables"
        },
        {
            "location": "/guides/setup-full-environment/#fork-the-projects",
            "text": "Go to the  Request Yo Racks  organization on Github and fork  the  infra ,  api , and  web  projects (the  charts  and  docs  projects are optional as they are no required to run RYR).",
            "title": "Fork the projects"
        },
        {
            "location": "/guides/setup-full-environment/#clone-or-update-the-projects",
            "text": "Configure a folder which will contain the RYR projects. export   RYR_PROJECT_DIR = \" ${ HOME } /projects/request-yo-racks\"     Configure your Github user. export   GH_USER = <your_github_user_name>    Clone or update the projects (the  charts  and  docs  projects are optional as they are no required to run RYR). mkdir -p  \" ${ RYR_PROJECT_DIR } \"  cd   \" ${ RYR_PROJECT_DIR } \"  for  project in api charts docs infra landing-page web ;   do \n  git clone git@github.com: ${ GH_USER } / ${ project } .git  2 > /dev/null  ||  git -C  ${ project } / pull upstream master ; \n  git -C  ${ project }  remote add upstream git@github.com:request-yo-racks/ ${ project } .git  2 > /dev/null ;  done     Each project is provided with a  Makefile  and can be simply setup with the  make  command.",
            "title": "Clone or update the projects"
        },
        {
            "location": "/guides/setup-full-environment/#start-the-services",
            "text": "",
            "title": "Start the services"
        },
        {
            "location": "/guides/setup-full-environment/#external-services",
            "text": "This will spin up  minikube  and setup the external services that are required by RYR, like  postgresql ,  redis , rabbitmq .  cd   \" ${ RYR_PROJECT_DIR } /infra/kubernetes\" \nmake provision configure",
            "title": "External services"
        },
        {
            "location": "/guides/setup-full-environment/#api",
            "text": "eval   $( minikube docker-env )  cd   \" ${ RYR_PROJECT_DIR } /api\" \nmake build-docker deploy-minikube- { api,flower,celery-worker }   Test your setup from a terminal: curl -X GET  \\ \n   'http://api.192.168.99.100.nip.io/1.0/places?location=30.318673580117846,-97.72446155548096'  \nOr from a web browser: http://api.192.168.99.100.nip.io/1.0/places?location=30.318673580117846,-97.72446155548096  You can also browse the API documentation: http://api.192.168.99.100.nip.io/1.0/ui",
            "title": "API"
        },
        {
            "location": "/guides/setup-full-environment/#web",
            "text": "Notes  Your Google Maps API key will automatically be pulled from the environment variables into the  src/config-dev.js \nfile by the  Makefile . See the  init-config  target for more details.   eval   $( minikube docker-env )  cd   \" ${ RYR_PROJECT_DIR } /web\" \nnpm i\nnpm run dev  Check the web application: open http://127.0.0.1:8080",
            "title": "Web"
        },
        {
            "location": "/guides/update-branch/",
            "text": "Keeping your branch up-to-date\n\u00b6\n\n\nWhen working with other developers, it can be that the branch your are working on becomes out of sync with the base\nbranch. In your Github PR your will see the following message:\n\n\n\n\nIf this happens, you need to retrieve all the changes from upstream, and apply them to your branch by rebasing it on top of master.\n\n\n\n\n\n\nOpen Terminal.\n\n\n\n\n\n\nChange the current working directory to your local project.\n\n\n\n\n\n\nSync up your fork with \nupstream\n.\n\ngit checkout master\ngit pull upstream master\ngit push origin master\n\n\n\n\n\n\n\nRebase your branch.\n\ngit checkout -\ngit rebase master\n\n\n\n\n\n\n\nUpdate your branch.\n\ngit push origin -f\n\n\n\n\n\n\n\nGithub help links\n\u00b6\n\n\n\n\nSyncing a fork\n\n\nPushing to a remote",
            "title": "Keeping your branch up-to-date"
        },
        {
            "location": "/guides/update-branch/#keeping-your-branch-up-to-date",
            "text": "When working with other developers, it can be that the branch your are working on becomes out of sync with the base\nbranch. In your Github PR your will see the following message:   If this happens, you need to retrieve all the changes from upstream, and apply them to your branch by rebasing it on top of master.    Open Terminal.    Change the current working directory to your local project.    Sync up your fork with  upstream . git checkout master\ngit pull upstream master\ngit push origin master    Rebase your branch. git checkout -\ngit rebase master    Update your branch. git push origin -f",
            "title": "Keeping your branch up-to-date"
        },
        {
            "location": "/guides/update-branch/#github-help-links",
            "text": "Syncing a fork  Pushing to a remote",
            "title": "Github help links"
        },
        {
            "location": "/guides/git-extras/",
            "text": "Installing GIT extras\n\u00b6\n\n\n\n\nOpen Terminal\n\n\nChange the current working directory to your local project.\n\n\nInstall git-extras:\n    \nbrew install git-extras\n\n\n\n\n\nGit Extras help links\n\u00b6\n\n\n\n\nGit extras",
            "title": "Installing Git extras"
        },
        {
            "location": "/guides/git-extras/#installing-git-extras",
            "text": "Open Terminal  Change the current working directory to your local project.  Install git-extras:\n     brew install git-extras",
            "title": "Installing GIT extras"
        },
        {
            "location": "/guides/git-extras/#git-extras-help-links",
            "text": "Git extras",
            "title": "Git Extras help links"
        },
        {
            "location": "/guides/install-hub/",
            "text": "Installing Hub\n\u00b6\n\n\n\n\nOpen Terminal\n\n\nInstall hub\n    \nbrew install hub\n\n\n\n\n\nHub help links\n\u00b6\n\n\n\n\nHub",
            "title": "Installing Hub"
        },
        {
            "location": "/guides/install-hub/#installing-hub",
            "text": "Open Terminal  Install hub\n     brew install hub",
            "title": "Installing Hub"
        },
        {
            "location": "/guides/install-hub/#hub-help-links",
            "text": "Hub",
            "title": "Hub help links"
        },
        {
            "location": "/guides/install-liquidprompt/",
            "text": "Installing Liquidprompt\n\u00b6\n\n\n\n\nOpen Terminal\n\n\nInstall liquidprompt\n    \nbrew install liquidprompt\n\n\n\n\n\nliquidprompt help links\n\u00b6\n\n\n\n\nGit liquidprompt",
            "title": "Installing Liquidprompt"
        },
        {
            "location": "/guides/install-liquidprompt/#installing-liquidprompt",
            "text": "Open Terminal  Install liquidprompt\n     brew install liquidprompt",
            "title": "Installing Liquidprompt"
        },
        {
            "location": "/guides/install-liquidprompt/#liquidprompt-help-links",
            "text": "Git liquidprompt",
            "title": "liquidprompt help links"
        },
        {
            "location": "/learning/learning/",
            "text": "Learning resources\n\u00b6\n\n\nSometimes people are affraid to tackle a task or join a project because they think they do not have the appriopriate\nknoweldge. While it might sometimes be true, we, at Request Yo Racks, consider our projects as the best opportunity to\nlearn! And to make it easier for you to learn the ropes, we compiled the best resources!\n\n\nBeginners\n\u00b6\n\n\nLet's start with the fundamentals!\n\n\nTerminal\n\u00b6\n\n\nThe \n\"Really friendly intro to the command line\"\n is a must read/watch for beginners! While targeted for Mac users,\nit may help others as well. It comes with a nice illustrated support and a video.\n\nhttps://hellowebbooks.com/learn-command-line\n\n\nEnjoy this online class which will demistify the terminal in just 40 minutes!  \nhttps://www.udemy.com/command-line\n\n\nAn interactive tutorial that will reconcile you with the terminal.\n\nhttps://linuxsurvival.com/linux-tutorial-introduction\n\n\nA tutorial dividded in 13 sections to bring you from newbie to moderate wizard.\n\nhttps://ryanstutorials.net/linuxtutorial\n\n\nGit/GitHub\n\u00b6\n\n\nLearn git and GitHub using the \nGitHub Learning Lab\n. \nhttps://try.github.io\n\n\nBecome a git guru\n with Atlassian. \nhttps://www.atlassian.com/git/tutorials\n\n\nIntermediate\n\u00b6\n\n\nNow that you leveled up, let's bring some fun!\n\n\nPython\n\u00b6\n\n\nCompletely new to Python? Let \nReal Python\n help you learn everything about it.\n\nhttps://realpython.com/start-here/\n\n\nFrom zero to Hero with \nDive Into Python 3\n. This book covers all the facets of python, from writing a simple program,\nto using REST APIs, via unit tests. \nhttp://getpython3.com/diveintopython3/\n\n\nThe Hitchhiker\u2019s Guide to Python!\n is also a classic. An opiniated handbook which aims at making you a python expert.\n\nhttps://docs.python-guide.org/\n\n\nAdvanced\n\u00b6\n\n\n\"I'm here to serve you master.\"",
            "title": "Learning resources"
        },
        {
            "location": "/learning/learning/#learning-resources",
            "text": "Sometimes people are affraid to tackle a task or join a project because they think they do not have the appriopriate\nknoweldge. While it might sometimes be true, we, at Request Yo Racks, consider our projects as the best opportunity to\nlearn! And to make it easier for you to learn the ropes, we compiled the best resources!",
            "title": "Learning resources"
        },
        {
            "location": "/learning/learning/#beginners",
            "text": "Let's start with the fundamentals!",
            "title": "Beginners"
        },
        {
            "location": "/learning/learning/#terminal",
            "text": "The  \"Really friendly intro to the command line\"  is a must read/watch for beginners! While targeted for Mac users,\nit may help others as well. It comes with a nice illustrated support and a video. https://hellowebbooks.com/learn-command-line  Enjoy this online class which will demistify the terminal in just 40 minutes!   https://www.udemy.com/command-line  An interactive tutorial that will reconcile you with the terminal. https://linuxsurvival.com/linux-tutorial-introduction  A tutorial dividded in 13 sections to bring you from newbie to moderate wizard. https://ryanstutorials.net/linuxtutorial",
            "title": "Terminal"
        },
        {
            "location": "/learning/learning/#gitgithub",
            "text": "Learn git and GitHub using the  GitHub Learning Lab .  https://try.github.io  Become a git guru  with Atlassian.  https://www.atlassian.com/git/tutorials",
            "title": "Git/GitHub"
        },
        {
            "location": "/learning/learning/#intermediate",
            "text": "Now that you leveled up, let's bring some fun!",
            "title": "Intermediate"
        },
        {
            "location": "/learning/learning/#python",
            "text": "Completely new to Python? Let  Real Python  help you learn everything about it. https://realpython.com/start-here/  From zero to Hero with  Dive Into Python 3 . This book covers all the facets of python, from writing a simple program,\nto using REST APIs, via unit tests.  http://getpython3.com/diveintopython3/  The Hitchhiker\u2019s Guide to Python!  is also a classic. An opiniated handbook which aims at making you a python expert. https://docs.python-guide.org/",
            "title": "Python"
        },
        {
            "location": "/learning/learning/#advanced",
            "text": "\"I'm here to serve you master.\"",
            "title": "Advanced"
        },
        {
            "location": "/about/license/",
            "text": "License\n\u00b6\n\n\n\"Request Yo Racks\" is a collection of open source projects licensed under \nThe MIT License\n.",
            "title": "License"
        },
        {
            "location": "/about/license/#license",
            "text": "\"Request Yo Racks\" is a collection of open source projects licensed under  The MIT License .",
            "title": "License"
        }
    ]
}